{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n\r\nObject.defineProperty(Array.prototype, 'randomElement', {\r\n    value: function () {\r\n        return this.length ? this[Math.floor(Math.random() * this.length)] : undefined;\r\n    }\r\n});\r\nObject.defineProperty(Array.prototype, 'shuffle', {\r\n    value: function () {\r\n        // Knuth shuffle https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\r\n        for (let i = this.length; i > 0;) {\r\n            const j = Math.floor(Math.random() * i);\r\n            --i;\r\n            const tmp = this[i];\r\n            this[i] = this[j];\r\n            this[j] = tmp;\r\n        }\r\n        return this;\r\n    }\r\n});\r\n\r\n/**\r\n * Partition an array according to a partition function.\r\n * The partition function is of the form (elem: T, index?: number, array?: Array<T>) => string | number\r\n * and returns a key value for the item.\r\n * Returns an object whose properties are the partitioned keys.  The value of these properties\r\n * is an array of items belonging to the partition.\r\n * @example\r\n `const lookup: { [key: string]: string; } =\r\n {H: 'Hearts', D: 'Diamonds', S: 'Spades', C: 'Clubs' };\r\n ['4H', 'KD', '3S', 'AS', '9H'].partition( (e: string) => lookup[e[1]]);`\r\n\r\n { Hearts: [\"4H\", \"9H\"], Diamonds: [\"KD\"], Spades: [\"3S\", \"AS\"] }\r\n\r\n * @param filter A PartitionFunc\r\n */\r\n\r\ntype Partition<T> = {\r\n    [Key in string | number]: Array<T>;\r\n};\r\n\r\ntype PartitionFunc<T> = (item: T, index?: number, array?: Array<T>) => string | number\r\n\r\nObject.defineProperty(Array.prototype, 'partition', {\r\n    value:\r\n        function <T>(filter: PartitionFunc<T>) {\r\n            const partitions: Partition<T> = {};\r\n            let index = 0;\r\n            for (const item of this) {\r\n                const k = filter(item, index++, this);\r\n                if (partitions[k] === undefined)\r\n                    partitions[k] = [];\r\n                partitions[k].push(item);\r\n            }\r\n            return partitions;\r\n        }\r\n})\r\n\r\nconst gameNum = 0;\r\n\r\n\r\nfunction histogram(data: number[], nBins: number, binWidth : number):  number[] {\r\n\r\n\r\n    const hist = new Array<number>(nBins).fill(0);    // @ts-ignore\r\n\r\n    for (const v of data) {\r\n        const binNum = Math.floor(v / binWidth)\r\n        if (binNum >= 0 && binNum < nBins)\r\n            ++hist[binNum];\r\n    }\r\n\r\n    return hist\r\n}\r\n\r\nfunction plotHistogram(containerEl: HTMLDivElement, data: number[]) {\r\n    const dataMax = Math.max(...data)\r\n\r\n    const nBins = 60\r\n    // make chart a whole multiple of 10 seconds.\r\n    // binWidth is a whole number of seconds in milliseconds\r\n    const binWidth = 1_000 * (Math.floor(dataMax / 60_000) + 1)\r\n    const hist = histogram(data, nBins, binWidth)\r\n    const maxHistValue = Math.max(...hist)\r\n    // Clear the container\r\n    containerEl.innerHTML = \"\";\r\n    // Create a reaction time bar chart, with .5s per column from 0s to max(30, histInfo.max)\r\n    const chart = document.createElement('div');\r\n    chart.className = 'chart';  // CSS class\r\n    chart.style.gridTemplateColumns = `repeat(${nBins}, 5px)`;\r\n    containerEl.appendChild(chart);\r\n\r\n    for (let i = 0; i < nBins; ++i) {\r\n        const bar = document.createElement('div');\r\n        bar.className = 'bar';\r\n        bar.style.height = `${hist[i] / maxHistValue * 100}px`;\r\n        bar.style.gridColumn = `${i + 1}`;\r\n        bar.style.gridRow = '1';\r\n        bar.style.transform = `translateY(${100 - hist[i] / maxHistValue * 100}px)`;\r\n\r\n        chart.appendChild(bar);\r\n        // if (i % 10 == 0) {\r\n        //     const xLabel = document.createElement('div');\r\n        //     xLabel.className = 'x-label';\r\n        //     xLabel.style.gridRow = '2';\r\n        //     xLabel.style.gridColumn = `${i + 1} / span 10`\r\n        //     xLabel.innerText = `${i}`;\r\n        //     chart.appendChild(xLabel);\r\n        // }\r\n\r\n\r\n\r\n    }\r\n    // Add x-axis labels\r\n    // const xLabels = document.createElement('div');\r\n    // xLabels.className = 'x-labels';\r\n    // containerEl.appendChild(xLabels);\r\n    // for (let i = 0; i < histInfo.hist.length; ++i) {\r\n    //     const label = document.createElement('div');\r\n    //     label.className = 'x-label';\r\n    //     label.style.width = `${barWidth}%`;\r\n    //     label.style.left = `${i * barWidth}%`;\r\n    //     label.innerText = `${(i * histInfo.max / histInfo.hist.length / 1000).toFixed(0)}`\r\n    //     xLabels.appendChild(label);\r\n    // }\r\n\r\n}\r\nasync function game(instructions: string, set: string[], rows: number, cols: number, numInitialSets: number, setSize : number, setsToAddPerTimeout : number, timeoutMs: number = 3000) {\r\n\r\n    const timeoutActionType: \"hint\" | \"add\" | \"remove\" = setsToAddPerTimeout === 0 ? \"hint\" : setsToAddPerTimeout > 0 ? \"add\" : \"remove\"\r\n    let addMoreSets = true\r\n    let setsRemaining = 0\r\n    let timerHandle: number | undefined = undefined\r\n    let lastMatchTime = 0;\r\n// Hack\r\n    let lock: boolean = false;\r\n    let numTilesDealt = 0;\r\n    const reactionTimes: number[] = []\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        (document.querySelector('#instructions') as HTMLDivElement).innerHTML = instructions;\r\n        addMoreSets = timeoutMs > 0;\r\n        const grid_len = rows * cols\r\n        // create a grid\r\n        const grid: number[] = new Array<number>(grid_len).fill(0)\r\n\r\n        let numMatches = 0;\r\n        let matchingCells: HTMLDivElement[] = [];\r\n        const i2rc = (i: number): [number, number] => [ Math.floor(i / rows), i % rows]\r\n\r\n        const getGridIndexWithFewestTiles = (): number => {\r\n            const p: { i: number, h: number}[] = [];\r\n            for (let i = 0;  i < grid_len; ++i)\r\n                p.push({i: i, h: grid[i]} )\r\n            p.sort((a, b) => a.h - b.h)\r\n            let h = p[0].h\r\n            const lp: number[] = []\r\n            lp.push(p[0].i)\r\n            for (let j = 1; j < grid_len; ++j)\r\n                if (p[j].h > h)\r\n                    break;\r\n                else {\r\n                    lp.push(p[j].i)\r\n                }\r\n\r\n            // @ts-ignore\r\n            return lp.shuffle()[0]\r\n\r\n        }\r\n        const topTiles =(): HTMLDivElement[] => {\r\n            const tiles: HTMLDivElement[] = new Array(grid_len).fill(undefined)\r\n            for (const el of document.querySelectorAll('.tile')) {\r\n                const [locS, zIndexS] = el.id.split('-')\r\n                const loc = parseInt(locS)\r\n                const zIndex = parseInt(zIndexS)\r\n                if (tiles[loc] === undefined || zIndex > parseInt(tiles[loc].id.split('-')[1]))\r\n                    tiles[loc] = el as HTMLDivElement\r\n\r\n            }\r\n            return tiles\r\n        }\r\n\r\n        const findAVisibleSet = (): HTMLDivElement[] => {\r\n            const tiles = topTiles()\r\n            const visibleTiles = tiles.filter(t => t !== undefined && !t.classList.contains('rotateOut'))\r\n            // @ts-ignore\r\n            const partitions = visibleTiles.partition((t: HTMLDivElement) => set !== emojiImgs ? t.innerText : (<HTMLImageElement>t.firstElementChild).src)\r\n            for (const key in partitions)\r\n                if (partitions[key].length >= setSize)\r\n                    return partitions[key]\r\n            return []\r\n        }\r\n        const makeTileAtIndex = (i: number): void => {\r\n\r\n            // Images must always be unique\r\n            if (emoji_idx > emojis.length-1)\r\n                return;\r\n\r\n            const sz = Math.floor(deckEl.clientWidth / cols);\r\n            const relSize = Math.floor(100 / cols);\r\n            const fsz = Math.floor(sz / 2);\r\n            const h = grid[i]\r\n            const v: string = emojis[emoji_idx];\r\n\r\n            const comparator = set === emojiImgs  ?\r\n                (a: HTMLDivElement, b: HTMLDivElement) => (<HTMLImageElement>(a.firstElementChild)).src === (<HTMLImageElement>(b.firstElementChild)).src\r\n                : (a: HTMLDivElement, b: HTMLDivElement) => a.innerText === b.innerText\r\n            // https://stackoverflow.com/questions/48419167/how-to-convert-one-emoji-character-to-unicode-codepoint-number-in-javascript\r\n            // @ts-ignore\r\n            console.log([...v].map(e => e.codePointAt(0).toString(16)).join(`-`)) // gives correctly 1f469-200d-2695-fe0\r\n            const tileEl = document.createElement('div');\r\n            const [r, c] = i2rc(i)\r\n\r\n            ++grid[i];\r\n            const zIndex = 1000 + numTilesDealt++;\r\n            tileEl.classList.add('tile')\r\n            tileEl.style.zIndex = `${zIndex}`\r\n            tileEl.id = `${i}-${zIndex-1000}`;\r\n            if (set === emojiImgs)\r\n                tileEl.innerHTML = `<img src=\"imgs/${v}.png\">`\r\n            else\r\n                tileEl.innerText = v\r\n            tileEl.style.gridRow = `${r + 1}`\r\n            tileEl.style.gridColumn = `${c + 1}`\r\n            tileEl.style.animation = \"fade-in .2s, grow .5s\";\r\n            deckEl.appendChild(tileEl);\r\n\r\n            tileEl.ontransitionend = () => {\r\n                if (tileEl.classList.contains('rotateOut'))\r\n                    tileEl.remove();\r\n                else\r\n                    tileEl.classList.remove(\"rotateBack\");\r\n\r\n            }\r\n            tileEl.ontransitionstart = () => {\r\n                if (tileEl.classList.contains('rotateOut'))\r\n                    --grid[i];\r\n            }\r\n            const touched = (e: Event) => {\r\n                e.preventDefault();\r\n                if (lock)\r\n                    return;\r\n                lock = true;\r\n                if (matchingCells.length == 0) {\r\n                    tileEl.classList.add(\"selected\");\r\n                    matchingCells.push(tileEl)\r\n                } else if (!matchingCells.includes(tileEl) && comparator(tileEl, matchingCells[0])) {\r\n\r\n\r\n                    matchingCells.push(tileEl)\r\n                    tileEl.classList.add(\"selected\");\r\n                    if (++numMatches == setSize-1) {\r\n                        if (lastMatchTime != 0) {\r\n                            const elapsed = Date.now() - lastMatchTime;\r\n\r\n                            reactionTimes.push(elapsed)\r\n                            if (reactionTimes.length > 0) {\r\n                                (document.querySelector('.mean-reaction-time') as HTMLDivElement).innerText = `Mean reaction time: ${(reactionTimes.reduce((a, b) => a + b) / reactionTimes.length / 1000).toFixed(1)}`\r\n                                plotHistogram(document.querySelector('.histogram') as HTMLDivElement, reactionTimes)\r\n                            }\r\n                        }\r\n                        lastMatchTime = Date.now();\r\n                        numMatches = 0;\r\n                        setsRemaining -= 1;\r\n                        audioEl.pause();\r\n                        audioEl.currentTime = 0\r\n                        audioEl.play();\r\n\r\n                        setsRemainingEl.innerHTML = setsRemaining.toFixed(0)\r\n\r\n                        for (const cell of matchingCells)\r\n                            cell.classList.add('rotateOut')\r\n                        matchingCells = []\r\n                        // Start timer if not already started\r\n                        if (timerHandle === undefined && addMoreSets)\r\n                            timerHandle = setTimeout(delayedDeal, timeoutMs);\r\n                        if (setsRemaining === 0) {\r\n                            addMoreSets = false;\r\n                            clearTimeout(timerHandle);\r\n                            // Game over\r\n                            resolve();\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    for (const cell of matchingCells) {\r\n                        cell.classList.remove(\"selected\");\r\n                        cell.classList.add('rotateBack')\r\n                    }\r\n                    matchingCells = []\r\n                    numMatches = 0;\r\n                    tileEl.classList.add(\"rotateBack\");\r\n\r\n                }\r\n                lock = false;\r\n            }\r\n            tileEl.addEventListener('mousedown', touched)\r\n            tileEl.addEventListener('touchstart', touched)\r\n\r\n\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n        const dealSet = (n: number):number[] => {\r\n\r\n            const tileIndices: number[] = [] // Value is irrelevant, gets set in do loop\r\n            // Add a tile at lowest pile\r\n            tileIndices.push(getGridIndexWithFewestTiles())\r\n            let tempIndex = 0; // Value is irrelevant, gets set in do loop\r\n\r\n            for (let i = 0; i < n-1; ++i) {\r\n                // Add a matching tile anywhere except on the same grid location as any of the other tiles\r\n                do {\r\n                    tempIndex = Math.floor(Math.random() * grid_len)\r\n                } while (tileIndices.includes(tempIndex));\r\n                tileIndices.push(tempIndex)\r\n            }\r\n            for (const gridIndex of tileIndices)\r\n                makeTileAtIndex(gridIndex)\r\n            ++emoji_idx;\r\n            ++setsRemaining;\r\n            setsRemainingEl.innerHTML = setsRemaining.toFixed(0)\r\n            return tileIndices\r\n        }\r\n        const delayedDeal = () => {\r\n            // will re-trigger continuously until addMoreSets is false\r\n            // or a match has occurred less than timeoutMs ago\r\n            if (Date.now() - lastMatchTime > timeoutMs) {\r\n\r\n                if (timeoutActionType === \"hint\") {\r\n                    const s = findAVisibleSet()\r\n                    if (s.length && matchingCells.length === 0)\r\n                        for (const cell of s)\r\n                            cell.classList.add('rotateBack')\r\n                } else if (timeoutActionType === \"add\") {\r\n                    for (let np = 0; np < setsToAddPerTimeout; ++np)\r\n                        dealSet(setSize);\r\n                } else {\r\n                    // Remove a set\r\n                    const s = findAVisibleSet()\r\n                    for (const cell of s) {\r\n                        cell.classList.add('rotateOut')\r\n\r\n                    }\r\n                    --setsRemaining;\r\n                    setsRemainingEl.innerHTML = setsRemaining.toFixed(0)\r\n                    if (setsRemaining === 0) {\r\n                        addMoreSets = false;\r\n                        clearTimeout(timerHandle);\r\n                        // Game over\r\n                        resolve();\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n            if (addMoreSets)\r\n                timerHandle = setTimeout(delayedDeal, timeoutMs)\r\n\r\n        }\r\n        const deal = () => {\r\n            // Make the background\r\n            // for (let i = 0; i < grid_len; ++i)\r\n            //     makeTileAtIndex(i, true);\r\n            let setNum = 0;\r\n            const to = setInterval(() => {\r\n                if (setNum++ < numInitialSets)\r\n                    dealSet(setSize);\r\n                else\r\n                    clearInterval(to)\r\n            }, 50)\r\n            // for (let setNum = 0; set < numInitialSets; ++set)\r\n            //     dealSet();\r\n\r\n        }\r\n\r\n\r\n\r\n        // @ts-ignore\r\n        // const emojis = set.slice(0,100).shuffle()\r\n        const emojis = set.shuffle()\r\n        let emoji_idx = 0;\r\n\r\n\r\n\r\n        const layers : string[][] = []\r\n        // let elToMatch: HTMLDivElement | undefined = undefined\r\n\r\n        const setsRemainingEl= document.querySelector('#tiles-remaining') as HTMLDivElement;\r\n        const deckEl = document.querySelector('.deck') as HTMLDivElement;\r\n        const audioEl = document.querySelector('audio') as HTMLAudioElement;\r\n\r\n        // Make deck\r\n\r\n        deckEl.innerHTML = \"\";\r\n        deckEl.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;\r\n        deckEl.style.gridTemplateRows = `repeat(${rows}, 1fr)`;\r\n\r\n\r\n\r\n\r\n        deal();\r\n\r\n    });\r\n\r\n\r\n\r\n}\r\n// const set = allEmojis\r\nconst set = emojiImgs;\r\n\r\n(async () => {\r\n// 5 X 5 grid, 50 pairs, 5 seconds before hint\r\n    await game(\"Match all 50 pairs.\", set, 5, 5, 50, 2, 0, 5_000);\r\n// 5 X 5 grid, 100 pairs, 5 seconds  before new two new pairs of tiles are added\r\n    await game(\"Match pairs. Be quick, or new ones will appear!\", set, 5, 5, 100, 2, 2, 5_000);\r\n// 7 X 7 grid, 100 sets of three, 30 seconds  before hint\r\n    await game(\"Match sets of three.\", set, 7, 7, 100, 3, 0, 30_000);\r\n// 7 X 7 grid, 49 sets of three, 20 seconds  before three new sets of tiles are  added\r\n    await game(\"Match sets of three. Don't take too long finding them!\", set, 7, 7, 49, 3, 3, 20_000);\r\n// 9 X 9 grid, 81 sets of three, 30 seconds  before hint\r\n    await game(\"Match sets of three!\", set, 9, 9, 81, 3, 0, 30_000);\r\n// 9 X 9 grid, 81 sets of three, 30 seconds  before  three new sets of tiles are added\r\n    await game(\"No way you can finish this level.\", set, 9, 9, 81, 3, 3, 30_000);\r\n})();\r\n\r\n\r\n\r\n\r\n"]}